$breakpoints: (
    desktop: 900px,
    mobile: 700px
);

$site-colors: (
    black: #141414,
    white: #fff,
    focus: #abc
);
$brand-colors: (
    web: #abc,
    spotify: #1db954,
    bandcamp: #629aa9,
    youtube: #ff0000,
    facebook: #3b5998,
    facebook-square: #3b5998,
    instagram: #c13584,
    soundcloud: #ff8800,
    twitter: #1da1f2
);
$colors: map-merge($site-colors, $brand-colors);

$background-opacity: (
    opaque: 1,
    semi-opaque: .85,
    semi-transparent: .66, 
    transparent: .44,
    very-transparent: .22
);

$text-size: (
    small: .75rem,
    medium: 1rem,
    large: 1.4rem,
    x-large: 1.8rem,
    xx-large: 3rem,
    massive: 4.5rem,
    smaller: .8em,
    larger: 1.2em
);

$font-body: 'DM Sans', sans-serif;
$base-size: 10px;

$z-levels: (
    top: 1000,
    middle:  800,
    bottom:  600
);

$transition-speeds: (
    fast: .2s,
    medium: .4s,
    slow: .6s,
    slowest: .88s,
);

$desktop-menu-height: 160px;
$mobile-menu-height: 80px;
$desktop-menu-detached-height: $mobile-menu-height;
$mobile-menu-detached-height: 60px;

$border-width-min: 1px;
$border-width-medium: 2px;
$border-width-max: 5px;

$gutter-width: 30px;

/// Functions
@function size($factor, $base: $base-size) {
    @if $factor==auto {
        @return $factor;
    }

    @return $base * $factor;
}

@function relative-size($factor) {
    @return size(1em);
}

@function z($level) {
    @if map-has($z-levels, $level) {
        @return map-get($z-levels, $level);
    }
    @return $level;
}

@function speed($speed) {
    @if map-has($transition-speeds, $speed) {
        @return map-get($transition-speeds, $speed);
    }
    @return map-get($transition-speeds, fast);
}

@function color($color) {
    @if map-has($colors, $color) {
        @return map-get($colors, $color);
    }

    @return transparent;
}
@function text-size($size) {
    @if map-has($text-size, $size) {
        @return map-get($text-size, $size);
    }
    @return 1em;
}

@function color-black($opacity: max) {
    @if map-has($background-opacity, $opacity) {
        @return rgba(color(black), map-get($background-opacity, $opacity));
    }
    @return rgba(color(black), map-get($background-opacity, opaque));
}

@function breakpoint($breakpoint) {
    @if map-has($breakpoints, $breakpoint) {
        @return map-get($breakpoints, $breakpoint);
    }

    @return map-get($breakpoints, desktop);
}

/// Mixins
@mixin prop-if-set($property, $value: unset) {
    @if $value !=unset {
        #{$property}: $value;
    }
}

@mixin transition($element: all, $speed: fast, $timing: ease) {
    transition: $element speed($speed) $timing;
}

@mixin margin-top($size, $base: $base-size) {
    margin-top: size($size, $base);
}

@mixin margin-right($size, $base: $base-size) {
    margin-right: size($size, $base);
}

@mixin margin-bottom($size, $base: $base-size) {
    margin-bottom: size($size, $base);
}

@mixin margin-left($size, $base: $base-size) {
    margin-left: size($size, $base);
}

@mixin margin-x($left, $right: $left, $base: $base-size) {
    @include margin-left($left, $base);
    @include margin-right($right, $base);
}

@mixin margin-y($top, $bottom: $top, $base: $base-size) {
    @include margin-top($top, $base);
    @include margin-bottom($bottom, $base);
}

@mixin margin($top: 0, $right: $top, $bottom: $top, $left: $right, $base: $base-size) {
    margin: size($top, $base) size($right, $base) size($bottom, $base) size($left, $base);
}

@mixin padding-top($size, $base: $base-size) {
    padding-top: size($size, $base);
}

@mixin padding-right($size, $base: $base-size) {
    padding-right: size($size, $base);
}

@mixin padding-bottom($size, $base: $base-size) {
    padding-bottom: size($size, $base);
}

@mixin padding-left($size, $base: $base-size) {
    padding-left: size($size, $base);
}

@mixin padding-x($left, $right: $left, $base: $base-size) {
    @include padding-left($left, $base);
    @include padding-right($right, $base);
}

@mixin padding-y($top, $bottom: $top, $base: $base-size) {
    @include padding-top($top, $base);
    @include padding-bottom($bottom, $base);
}

@mixin padding($top: 0, $right: $top, $bottom: $top, $left: $right, $base: $base-size) {
    padding: size($top, $base) size($right, $base) size($bottom, $base) size($left, $base);
}

@mixin media-max($breakpoint) {
    @if map-has($breakpoints, $breakpoint) {
        @media only screen and (max-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }
}
@mixin media-min($breakpoint) {
    @if map-has($breakpoints, $breakpoint) {
        @media only screen and (min-width: map-get($breakpoints, $breakpoint) + 1) {
            @content;
        }
    }
}

@mixin mobile-only() {
    @include media-max(mobile) {
        @content;
    }
}
@mixin desktop-only() {
    @include media-min(mobile) {
        @content;
    }
}

@mixin container($margin-top: 0, $margin-bottom: $margin-top) {
    width: breakpoint(desktop);
    max-width: 96%;
    margin: $margin-top auto $margin-bottom;
}

@mixin position($position: unset, $top: unset, $right: unset, $bottom: unset, $left: unset, $z-index: unset) {
    @include prop-if-set(position, $position);
    @include prop-if-set(top, $top);
    @include prop-if-set(right, $right);
    @include prop-if-set(bottom, $bottom);
    @include prop-if-set(left, $left);
    @if $z-index != unset {
        z-index: z($z-index);
    }
}

@mixin position-fixed($top: unset, $right: unset, $bottom: unset, $left: unset, $z-index: unset) {
    @include position(fixed, $top, $right, $bottom, $left, $z-index);
}

@mixin position-absolute($top: unset, $right: unset, $bottom: unset, $left: unset, $z-index: unset) {
    @include position(absolute, $top, $right, $bottom, $left, $z-index);
}

@mixin position-absolute-centered($width: unset, $height: unset, $z-index: unset) {
    @include position-absolute($top: 50%, $left: 50%, $z-index: $z-index);
    @include prop-if-set(width, $width);
    @include prop-if-set(height, $height);
    transform: translate(-50%, -50%);
}

@mixin flex($inline: false, $direction: unset, $align: unset, $justify: unset, $wrap: unset) {
    @if $inline {
        display: inline-flex;
    } @else {
        display: flex;
    }

    @include prop-if-set(flex-direction, $direction);
    @include prop-if-set(align-items, $align);
    @include prop-if-set(justify-content, $justify);
    @include prop-if-set(flex-wrap, $wrap);
}

@mixin font($family: unset, $size: unset, $height: unset, $weight: unset, $style: unset, $decoration: unset, $transform: unset, $align: unset) {
    @include prop-if-set(font-family, $family);
    @include prop-if-set(font-size, $size);
    @include prop-if-set(font-weight, $weight);
    @include prop-if-set(font-style, $style);
    @include prop-if-set(line-height, $height);
    @include prop-if-set(text-align, $align);
    @include prop-if-set(text-decoration, $decoration);
    @include prop-if-set(text-transform, $transform);
}

@mixin text-shadow($size, $color) {
    text-shadow: $size $size $color;
}
@mixin text-shadow-default() {
    @include text-shadow($border-width-medium, color-black(semi-opaque));
}
@mixin text-shadow-large() {
    @include text-shadow($border-width-max, color-black(semi-opaque));
}
